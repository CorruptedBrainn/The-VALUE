
// Generated from ../ValuescriptLexer.g4 by ANTLR 4.13.2


#include "ValuescriptLexer.h"


/* lexer postinclude section */
#ifndef _WIN32
#pragma GCC diagnostic ignored "-Wunused-parameter"
#endif


using namespace antlr4;

using namespace valuescriptantlrgeneration;


using namespace antlr4;

namespace {

struct ValuescriptLexerStaticData final {
  ValuescriptLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  ValuescriptLexerStaticData(const ValuescriptLexerStaticData&) = delete;
  ValuescriptLexerStaticData(ValuescriptLexerStaticData&&) = delete;
  ValuescriptLexerStaticData& operator=(const ValuescriptLexerStaticData&) = delete;
  ValuescriptLexerStaticData& operator=(ValuescriptLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag valuescriptlexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<ValuescriptLexerStaticData> valuescriptlexerLexerStaticData = nullptr;

void valuescriptlexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (valuescriptlexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(valuescriptlexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<ValuescriptLexerStaticData>(
    std::vector<std::string>{
      "STATIC", "CONSTANT", "VARIABLE", "FUNCTION", "CLASS", "RETURN", "TYPENAMES", 
      "TEMPLATE", "IMPORT", "AS", "INTEGER", "DOUBLE", "BOOLEAN", "STRING", 
      "VOID", "TRUE", "FALSE", "IF", "ELSE", "DO", "WHILE", "FOR", "OPEN_PARENTHESES", 
      "CLOSED_PARENTHESES", "OPEN_CURLY_BRACE", "CLOSED_CURLY_BRACE", "OPEN_ANGLE_BRACKET", 
      "CLOSED_ANGLE_BRACKET", "OPEN_SQUARE", "CLOSED_SQUARE", "PERIOD", 
      "COMMA", "COLON", "SEMICOLON", "EXCLAMATION_POINT", "ARROW_OPERATOR", 
      "BITWISE_AND", "BOOLEAN_AND", "BITWISE_OR", "BOOLEAN_OR", "BITWISE_XOR", 
      "ADDITION", "SUBTRACTION", "MULTIPLICATION", "DIVISION", "MODULUS", 
      "INCREMENT", "DECREMENT", "ASSIGNMENT_GENERIC", "ASSIGNMENT_ADD", 
      "ASSIGNMENT_SUB", "ASSIGNMENT_MULTI", "ASSIGNMENT_DIV", "ASSIGNMENT_MOD", 
      "EQUALITY", "NON_EQUALITY", "GREATER_OR_EQUAL", "LESS_OR_EQUAL", "SINGLE_LINE_COMMENT", 
      "MULTI_LINE_COMMENT", "WHITESPACE", "FLOATING_LITERAL", "INTEGER_LITERAL", 
      "STRING_LITERAL", "IDENTIFIER", "LETTER", "ESCAPE"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'static'", "'const'", "'var'", "'func'", "'class'", "'return'", 
      "'typenames'", "'template'", "'import'", "'as'", "'int'", "'double'", 
      "'bool'", "'str'", "'void'", "'true'", "'false'", "'if'", "'else'", 
      "'do'", "'while'", "'for'", "'('", "')'", "'{'", "'}'", "'<'", "'>'", 
      "'['", "']'", "'.'", "','", "':'", "';'", "'!'", "'->'", "'&'", "'&&'", 
      "'|'", "'||'", "'^'", "'+'", "'-'", "'*'", "'/'", "'%'", "'++'", "'--'", 
      "'='", "'+='", "'-='", "'*='", "'/='", "'%='", "'=='", "'!='", "'>='", 
      "'<='"
    },
    std::vector<std::string>{
      "", "STATIC", "CONSTANT", "VARIABLE", "FUNCTION", "CLASS", "RETURN", 
      "TYPENAMES", "TEMPLATE", "IMPORT", "AS", "INTEGER", "DOUBLE", "BOOLEAN", 
      "STRING", "VOID", "TRUE", "FALSE", "IF", "ELSE", "DO", "WHILE", "FOR", 
      "OPEN_PARENTHESES", "CLOSED_PARENTHESES", "OPEN_CURLY_BRACE", "CLOSED_CURLY_BRACE", 
      "OPEN_ANGLE_BRACKET", "CLOSED_ANGLE_BRACKET", "OPEN_SQUARE", "CLOSED_SQUARE", 
      "PERIOD", "COMMA", "COLON", "SEMICOLON", "EXCLAMATION_POINT", "ARROW_OPERATOR", 
      "BITWISE_AND", "BOOLEAN_AND", "BITWISE_OR", "BOOLEAN_OR", "BITWISE_XOR", 
      "ADDITION", "SUBTRACTION", "MULTIPLICATION", "DIVISION", "MODULUS", 
      "INCREMENT", "DECREMENT", "ASSIGNMENT_GENERIC", "ASSIGNMENT_ADD", 
      "ASSIGNMENT_SUB", "ASSIGNMENT_MULTI", "ASSIGNMENT_DIV", "ASSIGNMENT_MOD", 
      "EQUALITY", "NON_EQUALITY", "GREATER_OR_EQUAL", "LESS_OR_EQUAL", "SINGLE_LINE_COMMENT", 
      "MULTI_LINE_COMMENT", "WHITESPACE", "FLOATING_LITERAL", "INTEGER_LITERAL", 
      "STRING_LITERAL", "IDENTIFIER", "LETTER", "ESCAPE"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,67,427,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,
  	1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,
  	1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
  	6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
  	1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
  	12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,
  	15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,
  	18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,
  	21,1,21,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,
  	27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,
  	34,1,34,1,35,1,35,1,35,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,39,1,39,1,
  	39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,
  	46,1,46,1,47,1,47,1,47,1,48,1,48,1,49,1,49,1,49,1,50,1,50,1,50,1,51,1,
  	51,1,51,1,52,1,52,1,52,1,53,1,53,1,53,1,54,1,54,1,54,1,55,1,55,1,55,1,
  	56,1,56,1,56,1,57,1,57,1,57,1,58,1,58,1,58,1,58,5,58,347,8,58,10,58,12,
  	58,350,9,58,1,58,3,58,353,8,58,1,58,1,58,1,58,1,58,1,59,1,59,1,59,1,59,
  	5,59,363,8,59,10,59,12,59,366,9,59,1,59,1,59,1,59,1,59,1,59,1,60,1,60,
  	1,60,1,60,1,61,4,61,378,8,61,11,61,12,61,379,1,61,1,61,5,61,384,8,61,
  	10,61,12,61,387,9,61,1,61,1,61,4,61,391,8,61,11,61,12,61,392,3,61,395,
  	8,61,1,62,4,62,398,8,62,11,62,12,62,399,1,63,1,63,1,63,5,63,405,8,63,
  	10,63,12,63,408,9,63,1,63,1,63,1,64,1,64,1,64,5,64,415,8,64,10,64,12,
  	64,418,9,64,1,65,1,65,1,66,1,66,1,66,1,66,3,66,426,8,66,3,348,364,406,
  	0,67,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,
  	27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,
  	25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,
  	73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,
  	48,97,49,99,50,101,51,103,52,105,53,107,54,109,55,111,56,113,57,115,58,
  	117,59,119,60,121,61,123,62,125,63,127,64,129,65,131,66,133,67,1,0,3,
  	3,0,9,10,13,13,32,32,1,0,48,57,3,0,65,90,95,95,97,122,439,0,1,1,0,0,0,
  	0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,
  	0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,
  	0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,
  	1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,
  	0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,
  	0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
  	1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,
  	0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,
  	0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,
  	1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,
  	1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,
  	1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,
  	1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,1,135,1,0,0,0,3,142,1,0,0,0,5,148,
  	1,0,0,0,7,152,1,0,0,0,9,157,1,0,0,0,11,163,1,0,0,0,13,170,1,0,0,0,15,
  	180,1,0,0,0,17,189,1,0,0,0,19,196,1,0,0,0,21,199,1,0,0,0,23,203,1,0,0,
  	0,25,210,1,0,0,0,27,215,1,0,0,0,29,219,1,0,0,0,31,224,1,0,0,0,33,229,
  	1,0,0,0,35,235,1,0,0,0,37,238,1,0,0,0,39,243,1,0,0,0,41,246,1,0,0,0,43,
  	252,1,0,0,0,45,256,1,0,0,0,47,258,1,0,0,0,49,260,1,0,0,0,51,262,1,0,0,
  	0,53,264,1,0,0,0,55,266,1,0,0,0,57,268,1,0,0,0,59,270,1,0,0,0,61,272,
  	1,0,0,0,63,274,1,0,0,0,65,276,1,0,0,0,67,278,1,0,0,0,69,280,1,0,0,0,71,
  	282,1,0,0,0,73,285,1,0,0,0,75,287,1,0,0,0,77,290,1,0,0,0,79,292,1,0,0,
  	0,81,295,1,0,0,0,83,297,1,0,0,0,85,299,1,0,0,0,87,301,1,0,0,0,89,303,
  	1,0,0,0,91,305,1,0,0,0,93,307,1,0,0,0,95,310,1,0,0,0,97,313,1,0,0,0,99,
  	315,1,0,0,0,101,318,1,0,0,0,103,321,1,0,0,0,105,324,1,0,0,0,107,327,1,
  	0,0,0,109,330,1,0,0,0,111,333,1,0,0,0,113,336,1,0,0,0,115,339,1,0,0,0,
  	117,342,1,0,0,0,119,358,1,0,0,0,121,372,1,0,0,0,123,394,1,0,0,0,125,397,
  	1,0,0,0,127,401,1,0,0,0,129,411,1,0,0,0,131,419,1,0,0,0,133,425,1,0,0,
  	0,135,136,5,115,0,0,136,137,5,116,0,0,137,138,5,97,0,0,138,139,5,116,
  	0,0,139,140,5,105,0,0,140,141,5,99,0,0,141,2,1,0,0,0,142,143,5,99,0,0,
  	143,144,5,111,0,0,144,145,5,110,0,0,145,146,5,115,0,0,146,147,5,116,0,
  	0,147,4,1,0,0,0,148,149,5,118,0,0,149,150,5,97,0,0,150,151,5,114,0,0,
  	151,6,1,0,0,0,152,153,5,102,0,0,153,154,5,117,0,0,154,155,5,110,0,0,155,
  	156,5,99,0,0,156,8,1,0,0,0,157,158,5,99,0,0,158,159,5,108,0,0,159,160,
  	5,97,0,0,160,161,5,115,0,0,161,162,5,115,0,0,162,10,1,0,0,0,163,164,5,
  	114,0,0,164,165,5,101,0,0,165,166,5,116,0,0,166,167,5,117,0,0,167,168,
  	5,114,0,0,168,169,5,110,0,0,169,12,1,0,0,0,170,171,5,116,0,0,171,172,
  	5,121,0,0,172,173,5,112,0,0,173,174,5,101,0,0,174,175,5,110,0,0,175,176,
  	5,97,0,0,176,177,5,109,0,0,177,178,5,101,0,0,178,179,5,115,0,0,179,14,
  	1,0,0,0,180,181,5,116,0,0,181,182,5,101,0,0,182,183,5,109,0,0,183,184,
  	5,112,0,0,184,185,5,108,0,0,185,186,5,97,0,0,186,187,5,116,0,0,187,188,
  	5,101,0,0,188,16,1,0,0,0,189,190,5,105,0,0,190,191,5,109,0,0,191,192,
  	5,112,0,0,192,193,5,111,0,0,193,194,5,114,0,0,194,195,5,116,0,0,195,18,
  	1,0,0,0,196,197,5,97,0,0,197,198,5,115,0,0,198,20,1,0,0,0,199,200,5,105,
  	0,0,200,201,5,110,0,0,201,202,5,116,0,0,202,22,1,0,0,0,203,204,5,100,
  	0,0,204,205,5,111,0,0,205,206,5,117,0,0,206,207,5,98,0,0,207,208,5,108,
  	0,0,208,209,5,101,0,0,209,24,1,0,0,0,210,211,5,98,0,0,211,212,5,111,0,
  	0,212,213,5,111,0,0,213,214,5,108,0,0,214,26,1,0,0,0,215,216,5,115,0,
  	0,216,217,5,116,0,0,217,218,5,114,0,0,218,28,1,0,0,0,219,220,5,118,0,
  	0,220,221,5,111,0,0,221,222,5,105,0,0,222,223,5,100,0,0,223,30,1,0,0,
  	0,224,225,5,116,0,0,225,226,5,114,0,0,226,227,5,117,0,0,227,228,5,101,
  	0,0,228,32,1,0,0,0,229,230,5,102,0,0,230,231,5,97,0,0,231,232,5,108,0,
  	0,232,233,5,115,0,0,233,234,5,101,0,0,234,34,1,0,0,0,235,236,5,105,0,
  	0,236,237,5,102,0,0,237,36,1,0,0,0,238,239,5,101,0,0,239,240,5,108,0,
  	0,240,241,5,115,0,0,241,242,5,101,0,0,242,38,1,0,0,0,243,244,5,100,0,
  	0,244,245,5,111,0,0,245,40,1,0,0,0,246,247,5,119,0,0,247,248,5,104,0,
  	0,248,249,5,105,0,0,249,250,5,108,0,0,250,251,5,101,0,0,251,42,1,0,0,
  	0,252,253,5,102,0,0,253,254,5,111,0,0,254,255,5,114,0,0,255,44,1,0,0,
  	0,256,257,5,40,0,0,257,46,1,0,0,0,258,259,5,41,0,0,259,48,1,0,0,0,260,
  	261,5,123,0,0,261,50,1,0,0,0,262,263,5,125,0,0,263,52,1,0,0,0,264,265,
  	5,60,0,0,265,54,1,0,0,0,266,267,5,62,0,0,267,56,1,0,0,0,268,269,5,91,
  	0,0,269,58,1,0,0,0,270,271,5,93,0,0,271,60,1,0,0,0,272,273,5,46,0,0,273,
  	62,1,0,0,0,274,275,5,44,0,0,275,64,1,0,0,0,276,277,5,58,0,0,277,66,1,
  	0,0,0,278,279,5,59,0,0,279,68,1,0,0,0,280,281,5,33,0,0,281,70,1,0,0,0,
  	282,283,5,45,0,0,283,284,5,62,0,0,284,72,1,0,0,0,285,286,5,38,0,0,286,
  	74,1,0,0,0,287,288,5,38,0,0,288,289,5,38,0,0,289,76,1,0,0,0,290,291,5,
  	124,0,0,291,78,1,0,0,0,292,293,5,124,0,0,293,294,5,124,0,0,294,80,1,0,
  	0,0,295,296,5,94,0,0,296,82,1,0,0,0,297,298,5,43,0,0,298,84,1,0,0,0,299,
  	300,5,45,0,0,300,86,1,0,0,0,301,302,5,42,0,0,302,88,1,0,0,0,303,304,5,
  	47,0,0,304,90,1,0,0,0,305,306,5,37,0,0,306,92,1,0,0,0,307,308,5,43,0,
  	0,308,309,5,43,0,0,309,94,1,0,0,0,310,311,5,45,0,0,311,312,5,45,0,0,312,
  	96,1,0,0,0,313,314,5,61,0,0,314,98,1,0,0,0,315,316,5,43,0,0,316,317,5,
  	61,0,0,317,100,1,0,0,0,318,319,5,45,0,0,319,320,5,61,0,0,320,102,1,0,
  	0,0,321,322,5,42,0,0,322,323,5,61,0,0,323,104,1,0,0,0,324,325,5,47,0,
  	0,325,326,5,61,0,0,326,106,1,0,0,0,327,328,5,37,0,0,328,329,5,61,0,0,
  	329,108,1,0,0,0,330,331,5,61,0,0,331,332,5,61,0,0,332,110,1,0,0,0,333,
  	334,5,33,0,0,334,335,5,61,0,0,335,112,1,0,0,0,336,337,5,62,0,0,337,338,
  	5,61,0,0,338,114,1,0,0,0,339,340,5,60,0,0,340,341,5,61,0,0,341,116,1,
  	0,0,0,342,343,5,47,0,0,343,344,5,47,0,0,344,348,1,0,0,0,345,347,9,0,0,
  	0,346,345,1,0,0,0,347,350,1,0,0,0,348,349,1,0,0,0,348,346,1,0,0,0,349,
  	352,1,0,0,0,350,348,1,0,0,0,351,353,5,13,0,0,352,351,1,0,0,0,352,353,
  	1,0,0,0,353,354,1,0,0,0,354,355,5,10,0,0,355,356,1,0,0,0,356,357,6,58,
  	0,0,357,118,1,0,0,0,358,359,5,47,0,0,359,360,5,42,0,0,360,364,1,0,0,0,
  	361,363,9,0,0,0,362,361,1,0,0,0,363,366,1,0,0,0,364,365,1,0,0,0,364,362,
  	1,0,0,0,365,367,1,0,0,0,366,364,1,0,0,0,367,368,5,42,0,0,368,369,5,47,
  	0,0,369,370,1,0,0,0,370,371,6,59,0,0,371,120,1,0,0,0,372,373,7,0,0,0,
  	373,374,1,0,0,0,374,375,6,60,0,0,375,122,1,0,0,0,376,378,7,1,0,0,377,
  	376,1,0,0,0,378,379,1,0,0,0,379,377,1,0,0,0,379,380,1,0,0,0,380,381,1,
  	0,0,0,381,385,5,46,0,0,382,384,7,1,0,0,383,382,1,0,0,0,384,387,1,0,0,
  	0,385,383,1,0,0,0,385,386,1,0,0,0,386,395,1,0,0,0,387,385,1,0,0,0,388,
  	390,5,46,0,0,389,391,7,1,0,0,390,389,1,0,0,0,391,392,1,0,0,0,392,390,
  	1,0,0,0,392,393,1,0,0,0,393,395,1,0,0,0,394,377,1,0,0,0,394,388,1,0,0,
  	0,395,124,1,0,0,0,396,398,7,1,0,0,397,396,1,0,0,0,398,399,1,0,0,0,399,
  	397,1,0,0,0,399,400,1,0,0,0,400,126,1,0,0,0,401,406,5,34,0,0,402,405,
  	3,133,66,0,403,405,9,0,0,0,404,402,1,0,0,0,404,403,1,0,0,0,405,408,1,
  	0,0,0,406,407,1,0,0,0,406,404,1,0,0,0,407,409,1,0,0,0,408,406,1,0,0,0,
  	409,410,5,34,0,0,410,128,1,0,0,0,411,416,3,131,65,0,412,415,3,131,65,
  	0,413,415,7,1,0,0,414,412,1,0,0,0,414,413,1,0,0,0,415,418,1,0,0,0,416,
  	414,1,0,0,0,416,417,1,0,0,0,417,130,1,0,0,0,418,416,1,0,0,0,419,420,7,
  	2,0,0,420,132,1,0,0,0,421,422,5,92,0,0,422,426,5,34,0,0,423,424,5,92,
  	0,0,424,426,5,92,0,0,425,421,1,0,0,0,425,423,1,0,0,0,426,134,1,0,0,0,
  	14,0,348,352,364,379,385,392,394,399,404,406,414,416,425,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  valuescriptlexerLexerStaticData = std::move(staticData);
}

}

ValuescriptLexer::ValuescriptLexer(CharStream *input) : Lexer(input) {
  ValuescriptLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *valuescriptlexerLexerStaticData->atn, valuescriptlexerLexerStaticData->decisionToDFA, valuescriptlexerLexerStaticData->sharedContextCache);
}

ValuescriptLexer::~ValuescriptLexer() {
  delete _interpreter;
}

std::string ValuescriptLexer::getGrammarFileName() const {
  return "ValuescriptLexer.g4";
}

const std::vector<std::string>& ValuescriptLexer::getRuleNames() const {
  return valuescriptlexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& ValuescriptLexer::getChannelNames() const {
  return valuescriptlexerLexerStaticData->channelNames;
}

const std::vector<std::string>& ValuescriptLexer::getModeNames() const {
  return valuescriptlexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& ValuescriptLexer::getVocabulary() const {
  return valuescriptlexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView ValuescriptLexer::getSerializedATN() const {
  return valuescriptlexerLexerStaticData->serializedATN;
}

const atn::ATN& ValuescriptLexer::getATN() const {
  return *valuescriptlexerLexerStaticData->atn;
}




void ValuescriptLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  valuescriptlexerLexerInitialize();
#else
  ::antlr4::internal::call_once(valuescriptlexerLexerOnceFlag, valuescriptlexerLexerInitialize);
#endif
}
